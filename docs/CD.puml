@startuml CD
skinparam classAttributeIconSize 0

abstract Area {
  - area: String
  - code: int
  - m49: String
  - items: AVL<Item>

  + getArea(): String
  + getCode(): int
  + getM49(): String
  + getItems(): Iterable<Item>

  + addItem(item: Item): void
  + getItem(item: Item): Item

  + clone(): Area
  + toString(): String
  + equals(o: Object): boolean

  <<abstract>> compareTo(o: Area): int
}

abstract Item {
  - code: int
  - cpc: String
  - item: String
  - elements : AVL<Element>

  + getCode(): int
  + getCpc(): String
  + getItem(): String
  + getElements(): Iterable<Element>

  + addElement(element: Element): void
  + getElement(element: Element): Element

  + clone(): Item
  + toString(): String
  + equals(o: Object): boolean

  <<abstract>> compareTo(o: Item): int
}

abstract Element {
  - code: int
  - element: String
  - productionData : AVL<ProductionData>

  + getCode(): int
  + getElement(): String
  + addProductionData(productionData: ProductionData): void
  + getProductionData(year: int): ProductionData

  + getMostRecentYear(): int
  + valueSumTimeInterval(min: int, max: int): double

  + clone(): Element
  + toString(): String
  + equals(o: Object): boolean

  <<abstract>> compareTo(element: Element): int
}

class ProductionData {
  - year: int
  - value: Value

  + getYear(): int
  + getValue(): double
  + getUnit(): String
  + getFlag(): String
  + getFlagDescription(): String

  + clone(): ProductionData
  + toString(): String
  + equals(o: Object): boolean
  + compareTo(o: ProductionData): int
}

class Value {
  - value: double
  - unit: String
  - flag: String
  - flagDescription: String

  + getValue(): double
  + getUnit(): String
  + getFlag(): String
  + getFlagDescription(): String

  + setFlagDescription(flagDescription: String): void

  + clone(): Value
  + toString(): String
  + equals(o: Object): boolean
}

class Container {
  - areas: AVL<Area>

  + addArea(area: Area): void
  + getArea(area: Area): Area
  + getAreas(): Iterable<Area>

  + getNOfAreas(): int
  + getAreasWithConditions(item: Item, element: Element): Container
  + getAreasWithConditions(item: Item, element: Element, year: int): Container

  + isEmpty(): boolean
  + equals(): boolean
}

Container "1" o-- "1..*" Area
Area "1" o-- "1..*" Item
Item "1" o-- "1..*" Element
Element "1" o-- "1..*" ProductionData
ProductionData "1" o-- "1" Value

class AreaByCode {
  + compareTo(o: Area): int

}
class AreaByName {
  + compareTo(o: Area): int
}
class AreaByM49 {
  + compareTo(o: Area): int
}

class ItemByCode {
  + compareTo(o: Item): int
}
class ItemByName {
  + compareTo(o: Item): int
}
class ItemByCPC {
  + compareTo(o: Item): int
}

class ElementByCode {
  + compareTo(o: Element): int
}
class ElementByName {
  + compareTo(o: Element): int
}

Area <|-- AreaByCode
Area <|-- AreaByName
Area <|-- AreaByM49

Item <|-- ItemByCode
Item <|-- ItemByName
Item <|-- ItemByCPC

Element <|-- ElementByCode
Element <|-- ElementByName

@enduml
